import time

from PyQt6.QtGui import QAction, QPixmap
from PyQt6.QtWidgets import QLabel, QHBoxLayout, QWidget, QPushButton, QMessageBox, QComboBox, QInputDialog
from PyQt6.QtWidgets import QMainWindow, QCheckBox, QGraphicsScene, QGraphicsView, QLineEdit
from PyQt6 import uic
from PyQt6.QtCore import Qt, QRectF
from PyQt6.QtCore import QTimer
import serial
import serial.tools.list_ports
import re
import json  # P≈ôid√°me modul pro zpracov√°n√≠ JSON

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        uic.loadUi("./gui/MainWindow.ui", self)

        self.resize(1182, 826)  # Zmƒõ≈àte hodnoty na po≈æadovanou velikost

        # set up statusbar
        self.status_db = QWidget()
        self.status_db_layout = QHBoxLayout()
        self.status_db_layout.setSpacing(0)
        self.status_db.setLayout(self.status_db_layout)
        self.statusBar().addPermanentWidget(self.status_db)
        self.statusBar()

        # lookup for a button exit
        self.exit_action = self.findChild(QAction, "actionExit")
        self.exit_action.triggered.connect(self.close)

        # window display show
        self.show()

        # Inicializace s√©riov√©ho p≈ôipojen√≠ a ƒçasovaƒçe
        self.serial_connection = None
        self.serial_timer = QTimer(self)

        # Naƒçten√≠ prvk≈Ø z GUI pomoc√≠ findChild
        self.portComboBox = self.findChild(QComboBox, "portComboBox")
        self.connectButton = self.findChild(QPushButton, "connect_butt")
        self.refreshButton = self.findChild(QPushButton, "refreshButton")
        self.statusLabel = self.findChild(QLabel, "statusLabel")
        self.phoneNumberComboBox = self.findChild(QComboBox, "phoneNumberComboBox")
        self.camRstButton = self.findChild(QPushButton, "camRstButt")
        self.lteRstButton = self.findChild(QPushButton, "lteRstButt")
        self.wakeupComboBox = self.findChild(QComboBox, "wakeupcomboBox")
        self.sendPhotoComboBox = self.findChild(QComboBox, "sendPhotoComboBox")
        self.resolutionComboBox = self.findChild(QComboBox, "resolutioncomboBox")
        self.qualitycomboBox = self.findChild(QComboBox, "qualitycomboBox")
        self.addPhoneNum = self.findChild(QPushButton, "addPhoneNum")
        self.batteryCheckBox = self.findChild(QCheckBox, "batterycheckBox")
        self.chargingCheckBox = self.findChild(QCheckBox, "chargingcheckBox")
        self.batterylifeCheckBox = self.findChild(QCheckBox, "batterykifecheckBox")
        self.sendAutoSMScheckBox = self.findChild(QCheckBox, "sendAutoSMScheckBox")
        #self.sendPhotosCheckBox = self.findChild(QCheckBox, "sendPhotosCheckBox")
        self.sendSMSPushButton = self.findChild(QPushButton, "sendSMSpushButton")
        self.photoView = self.findChild(QGraphicsView, "photoView")
        self.takePhotoButton = self.findChild(QPushButton, "takephotopushButton")
        self.getBatteryButton = self.findChild(QPushButton, "getbatterypushButton")
        self.getChargingButton = self.findChild(QPushButton, "getchargingpushButton")
        self.getRemainingTimeButton = self.findChild(QPushButton, "gettimepushButton")
        self.defaultConfButt = self.findChild(QPushButton, "defaultConfButt")
        self.saveConfButton = self.findChild(QPushButton, "saveConfButton")
        self.getSingalLevelButton = self.findChild(QPushButton, "getSingalLevelButton")
        self.batteryLabel = self.findChild(QLabel, "batterylabel")
        self.chargingLabel = self.findChild(QLabel, "charginglabel")
        self.remainingTimeLabel = self.findChild(QLabel, "remaininglabel")
        self.signalLevellabel = self.findChild(QLabel, "signalLevellabel")
        self.apnLineEdit = self.findChild(QLineEdit, "apnLineEdit")
        self.urlLineEdit = self.findChild(QLineEdit, "urlLineEdit")
        self.sharedKeyLineEdit = self.findChild(QLineEdit, "sharedKeyLineEdit")

        # P≈ôid√°me p≈ôednastaven√© prvky ComboBoxu
        self.wakeupComboBox.addItems(["30 s", "60 s", "5 min", "10 min", "30 min", "60 min", "5 h",
                                      "24 h", "48 h"])
        self.sendPhotoComboBox.addItems(["Immediately", "After 1 hour", "After 3 hours"])
        self.resolutionComboBox.addItems([
            "320x240 (QVGA)",
            "640x480 (VGA)",
            "800x600 (SVGA)",
            "1024x768 (XGA)",
            "1280x720 (HD)",
            "1600x1200 (UXGA)"
        ])
        self.phoneNumberComboBox.addItem("+420735009345")
        self.qualitycomboBox.addItems([
         "Very high",
         "High",
         "Middle",
         "Low"
        ])

        # P≈ôipoj√≠me ud√°lost zmƒõny v√Ωbƒõru k metodƒõ pro zpracov√°n√≠
        self.sendPhotoComboBox.currentIndexChanged.connect(self.set_sendPhoto)
        self.resolutionComboBox.currentIndexChanged.connect(self.set_resolution)
        self.wakeupComboBox.currentIndexChanged.connect(self.set_wakeUpTime)
        self.qualitycomboBox.currentIndexChanged.connect(self.set_qualityPhoto)

        # P≈ôi≈ôad√≠me funkce k tlaƒç√≠tk≈Øm
        self.connectButton.clicked.connect(self.connect_to_port)
        self.refreshButton.clicked.connect(self.refresh_ports)
        self.addPhoneNum.clicked.connect(self.add_phone_number)
        self.sendSMSPushButton.clicked.connect(self.send_sms)
        self.takePhotoButton.clicked.connect(self.request_photo_from_esp32)
        self.getBatteryButton.clicked.connect(self.get_battery_level)
        self.getChargingButton.clicked.connect(self.get_charging_status)
        self.getRemainingTimeButton.clicked.connect(self.get_remaining_time)
        self.camRstButton.clicked.connect(self.trailCamReset)
        self.lteRstButton.clicked.connect(self.lteReset)
        self.defaultConfButt.clicked.connect(self.reset_to_default)
        self.saveConfButton.clicked.connect(self.save_configuration)
        self.getSingalLevelButton.clicked.connect(self.get_signalLevel)

        # V konstruktoru __init__ p≈ôipojte ka≈æd√Ω CheckBox k funkci check_checkbox_status
        self.batteryCheckBox.stateChanged.connect(self.check_checkbox_status)
        self.chargingCheckBox.stateChanged.connect(self.check_checkbox_status)
        self.batterylifeCheckBox.stateChanged.connect(self.check_checkbox_status)
        self.sendAutoSMScheckBox.stateChanged.connect(self.checkbox_sendSMS_status)
        #self.sendPhotosCheckBox.stateChanged.connect(self.checkbox_sendPhotosToURL)

        self.scene = QGraphicsScene(self)
        self.photoView.setScene(self.scene)

        # Naƒçteme dostupn√© porty p≈ôi spu≈°tƒõn√≠ aplikace
        self.refresh_ports()
        self.serial_buffer = ""  # Inicializace bufferu pro p≈ô√≠jem s√©riov√Ωch dat

    def trailCamReset(self):
        # Ode≈°leme restartovac√≠ p≈ô√≠kaz
        self.send_command_to_esp32("RESTART")

        # Zav≈ôeme s√©riov√© p≈ôipojen√≠ (proto≈æe ESP32 se restartuje, UART spojen√≠ je p≈ôeru≈°eno)
        if self.serial_connection and self.serial_connection.is_open:
            self.serial_connection.close()
            self.serial_connection = None

        # Vyƒçist√≠me GUI status
        self.statusBar().showMessage("üîÑ Trail Camera restarting. Please reconnect.")

    def lteReset(self):
        response = self.send_command_to_esp32("RESTARTLTE")
        if response == "LTERESTARTED":
            self.statusBar().showMessage("‚úÖ LTE module was restarted.")

    def get_battery_level(self):
        response = self.send_command_to_esp32("GET_BATTERY_LEVEL")
        if response:
            self.batteryLabel.setText(response)
            self.statusBar().showMessage("‚úÖ Battery level updated.")

    def get_charging_status(self):
        response = self.send_command_to_esp32("GET_CHARGING_STATUS")
        if response:
            self.chargingLabel.setText(response)
            self.statusBar().showMessage("‚úÖ Charging status updated.")

    def get_remaining_time(self):
        response = self.send_command_to_esp32("GET_REMAINING_TIME")
        if response:
            self.remainingTimeLabel.setText(response)
            self.statusBar().showMessage("‚úÖ Remaining battery time updated.")

    def get_signalLevel(self):
        response = self.send_command_to_esp32("GET_SIGNAL")
        if response:
            self.signalLevellabel.setText(response)
            self.statusBar().showMessage("‚úÖ Signal Level updated.")

    def closeEvent(self, event):
        # Ujistƒõte se, ≈æe s√©riov√© p≈ôipojen√≠ je zav≈ôen√© p≈ôi zav≈ôen√≠ aplikace
        if self.serial_connection and self.serial_connection.is_open:
            self.serial_connection.write(b"EXIT_CONFIG\n")
            self.serial_connection.close()
        event.accept()

    def request_photo_from_esp32(self):
        """ Po≈æ√°d√° ESP32 o sn√≠mek, p≈ôijme jej a zobraz√≠ v aplikaci. """

        # 1Ô∏è‚É£ Nejprve zkontrolujeme, zda jsme p≈ôipojeni k ESP32
        if not self.serial_connection or not self.serial_connection.is_open:
            QMessageBox.warning(self, "Connection Error", "ESP32 is not connected.")
            return

        try:
            # 2Ô∏è‚É£ Pokud ji≈æ je v n√°hledov√©m oknƒõ nƒõjak√° fotka, sma≈æeme ji
            if not self.scene.items():  # Pokud nen√≠ pr√°zdn√°
                self.scene.clear()  # Odstranƒõn√≠ star√©ho obr√°zku

            self.serial_connection.reset_input_buffer()  # Vyƒçist√≠me buffer

            # 3Ô∏è‚É£ Odesl√°n√≠ p≈ô√≠kazu k po≈ô√≠zen√≠ sn√≠mku
            self.serial_connection.write(b'TAKE_PHOTO\n')
            self.statusBar().showMessage("üì° Po≈æadavek na sn√≠mek odesl√°n...")
            time.sleep(0.5)

            # 4Ô∏è‚É£ ƒåek√°me na odpovƒõƒè s metadaty
            while True:
                response = self.serial_connection.readline().decode().strip()
                if response.startswith("{") and response.endswith("}"):  # Ovƒõ≈ôen√≠ JSON form√°tu
                    break  # M√°me validn√≠ JSON, pokraƒçujeme

            # 5Ô∏è‚É£ Ovƒõ≈ôen√≠ JSON odpovƒõdi (velikost souboru)
            try:
                photo_data = json.loads(response)
                photo_size = int(photo_data.get("PHOTO_SIZE", 0))
                if photo_size <= 0:
                    self.statusBar().showMessage("‚ö†Ô∏è Neplatn√° velikost fotky.")
                    return
            except json.JSONDecodeError:
                self.statusBar().showMessage(f"‚ö†Ô∏è Neplatn√Ω JSON p≈ôi ƒçten√≠ fotky: {response}")
                return

            # 6Ô∏è‚É£ Naƒç√≠t√°n√≠ bin√°rn√≠ch dat
            received_bytes = 0
            with open("received_photo.jpg", "wb") as file:
                while received_bytes < photo_size:
                    data = self.serial_connection.read(min(1024, photo_size - received_bytes))
                    if not data:
                        break
                    file.write(data)
                    received_bytes += len(data)

            # 7Ô∏è‚É£ Kontrola spr√°vnosti p≈ôenosu
            if received_bytes == photo_size:
                self.statusBar().showMessage("‚úÖ Photo OK.")
                self.display_photo("received_photo.jpg")  # Zobrazen√≠ nov√© fotky
            else:
                self.statusBar().showMessage(f"‚ö†Ô∏è Photo err ({received_bytes}/{photo_size} bytes).")

        except serial.SerialException as e:
            QMessageBox.critical(self, "Serial Error", f"‚ö†Ô∏è Chyba komunikace se za≈ô√≠zen√≠m: {e}")

        except Exception as e:
            QMessageBox.critical(self, "Error", f"‚ö†Ô∏è Neoƒçek√°van√° chyba p≈ôi p≈ôij√≠m√°n√≠ fotografie: {e}")

    def display_photo(self, file_path):
        # Naƒç√≠t√°n√≠ a zobrazen√≠ fotografie
        pixmap = QPixmap(file_path)
        if pixmap.isNull():
            QMessageBox.critical(self, "Error", "Failed to load the image.")
            return

        self.scene.clear()
        pixmap_item = self.scene.addPixmap(pixmap)
        rect = QRectF(pixmap.rect())
        self.photoView.fitInView(rect, Qt.AspectRatioMode.KeepAspectRatio)

    def send_sms(self):
        if not self.serial_connection or not self.serial_connection.is_open:
            QMessageBox.warning(self, "Connection Error", "ESP32 is not connected.")
            return

        phone_number = self.phoneNumberComboBox.currentText()

        if not phone_number:
            QMessageBox.warning(self, "Missing Phone Number", "Please select a phone number.")
            return

        flags = ""
        if self.batteryCheckBox.isChecked():
            flags += "B"
        if self.chargingCheckBox.isChecked():
            flags += "C"
        if self.batterylifeCheckBox.isChecked():
            flags += "T"

        if not flags:
            QMessageBox.warning(self, "Empty Message", "Please select at least one message option.")
            return

        try:
            # Nepou≈æ√≠v√°me nov√© otev≈ôen√≠ portu ‚Äì vyu≈æijeme self.serial_connection
            command = f"SEND_SMS:{phone_number}:{flags}\n"
            self.serial_connection.write(command.encode())
            self.serial_connection.flush()

            self.statusBar().showMessage(f"üì§ SMS command sent to {phone_number} with flags: {flags}")

        except serial.SerialException as e:
            QMessageBox.critical(self, "Serial Communication Error", f"‚ùå Failed to send SMS: {e}")

    def checkbox_sendSMS_status(self):
        send_sms_when_captured = self.sendAutoSMScheckBox.isChecked()
        status_message = "Auto SMS active " if send_sms_when_captured else "Auto SMS inactive"
        self.statusBar().showMessage(status_message)

    def check_checkbox_status(self):
        battery_checked = self.batteryCheckBox.isChecked()
        charging_checked = self.chargingCheckBox.isChecked()
        batterylife_checked = self.batterylifeCheckBox.isChecked()

        status_message = "Status - "
        status_message += "Battery: ON, " if battery_checked else "Battery: OFF, "
        status_message += "Charging: ON, " if charging_checked else "Charging: OFF, "
        status_message += "Battery Life: ON" if batterylife_checked else "Battery Life: OFF"

        self.statusBar().showMessage(status_message)

    def add_phone_number(self):
        """ Otev≈ôe dialogov√© okno pro zad√°n√≠ telefonn√≠ho ƒç√≠sla a p≈ôid√° ho do ComboBoxu """
        phone_number, ok = QInputDialog.getText(
            self,
            "Write Phone Number",
            "Write phone number in format: +420XXXXXXXXX"
        )

        if ok and phone_number:  # U≈æivatel potvrdil vstup
            # Ovƒõ≈ôen√≠, zda ƒç√≠slo odpov√≠d√° form√°tu +420XXXXXXXXX
            if re.fullmatch(r"\+420\d{9}", phone_number):
                # Zkontrolujeme, jestli ƒç√≠slo nen√≠ ji≈æ v ComboBoxu
                if phone_number not in [self.phoneNumberComboBox.itemText(i) for i in
                                        range(self.phoneNumberComboBox.count())]:
                    # P≈ôid√°me nov√© ƒç√≠slo do ComboBoxu
                    self.phoneNumberComboBox.addItem(phone_number)
                    self.statusBar().showMessage(f"üìû Phone number {phone_number} added.")
                else:
                    QMessageBox.warning(self, "Duplicate Number", "This phone number is already in the list.")
            else:
                QMessageBox.warning(self, "Invalid Format", "Phone number must be in the format +420XXXXXXXXX.")


    def set_qualityPhoto(self):
        selected_quality = self.qualitycomboBox.currentText()
        self.statusBar().showMessage(f"Quality of Photo set: {selected_quality}")

    def set_wakeUpTime(self):
        selected_wakeUpTime = self.wakeupComboBox.currentText()
        self.statusBar().showMessage(f"Wake up time set: {selected_wakeUpTime}")

    def set_sendPhoto(self):
        selected_sendPhoto = self.sendPhotoComboBox.currentText()
        self.statusBar().showMessage(f"Send Photo set to: {selected_sendPhoto}")

    def set_resolution(self):
        selected_resolution = self.resolutionComboBox.currentText()
        self.statusBar().showMessage(f"Photo resolution set: {selected_resolution}")

    def refresh_ports(self):
        ports = serial.tools.list_ports.comports()

        self.portComboBox.clear()

        for port in ports:
            self.portComboBox.addItem(port.device)

        if self.portComboBox.count() == 0:
            self.statusBar().showMessage("‚ùå No ports available")
        else:
            self.statusBar().showMessage("Choose port")

    def send_command_to_esp32(self, command):
        if not self.serial_connection or not self.serial_connection.is_open:
            QMessageBox.warning(self, "Connection Error", "ESP32 is not connected.")
            return None

        try:
            self.serial_connection.reset_input_buffer()  # üßπ VYƒåIST√çME BUFFER
            time.sleep(0.05)  # Volitelnƒõ mal√° prodleva ‚Äì m≈Ø≈æe pomoci

            self.serial_connection.write((command + "\n").encode())
            self.serial_connection.flush()

            if command == "RESTART":
                self.statusBar().showMessage("‚úÖ Trail Camera was restarted.")
                return None

            # üïí ƒåek√°me na odpovƒõƒè max. 1 sekundu
            start = time.time()
            response = ""
            while time.time() - start < 3.0:
                if self.serial_connection.in_waiting > 0:
                    response = self.serial_connection.readline().decode().strip()
                    break

            return response if response else None

        except serial.SerialException as e:
            self.statusBar().showMessage(f"‚ùå Communication error: {e}")
            return None

    def connect_to_port(self):
        """ P≈ôipojen√≠ k ESP32, posl√°n√≠ WAKEUP a naƒçten√≠ JSON konfigurace """
        selected_port = self.portComboBox.currentText()

        if not selected_port:
            self.statusBar().showMessage("Choose port")
            return

        try:
            # ‚úÖ Zav≈ôeme star√© p≈ôipojen√≠, pokud existuje
            if self.serial_connection and self.serial_connection.is_open:
                self.serial_connection.close()

            # ‚úÖ Otev≈ôeme nov√© s√©riov√© p≈ôipojen√≠
            self.serial_connection = serial.Serial(selected_port, 115200, timeout=1)
            self.statusBar().showMessage(f"Connected to {selected_port}")

            # ‚úÖ Vyƒçist√≠me buffer, abychom ignorovali bootovac√≠ zpr√°vy ESP32
            self.serial_connection.reset_input_buffer()
            time.sleep(1)  # D√°me ESP32 ƒças na inicializaci

            # ‚úÖ Po≈°leme WAKEUP, aby se ESP32 probudilo
            self.serial_connection.write(b"WAKEUP\n")
            self.serial_connection.flush()
            self.statusBar().showMessage("üì° WAKEUP odesl√°n, ƒçek√°me na konfiguraci...")

            # ‚úÖ ƒåek√°me maxim√°lnƒõ 1 sekundu na validn√≠ JSON odpovƒõƒè
            start_time = time.time()
            response = ""

            while time.time() - start_time < 1:
                if self.serial_connection.in_waiting > 0:
                    line = self.serial_connection.readline().decode(errors='ignore').strip()
                    print(f"üì° P≈ôijat√° data: {line}")  # Debug v√Ωpis

                    if line.startswith("{") and line.endswith("}"):  # Ovƒõ≈ôen√≠ JSON form√°tu
                        response = line
                        break  # Jakmile m√°me validn√≠ JSON, nemus√≠me ƒç√≠st d√°l

            # ‚úÖ Ovƒõ≈ôen√≠, zda jsme dostali validn√≠ JSON
            if not response.startswith("{") or not response.endswith("}"):
                self.statusBar().showMessage("‚ö†Ô∏è Not Connected.")
                if self.serial_connection and self.serial_connection.is_open:
                    self.serial_connection.close()
                return

            # ‚úÖ Zpracov√°n√≠ JSON odpovƒõdi a aktualizace GUI
            try:
                config_data = json.loads(response)
                print(f"‚úÖ Loaded configuration: {config_data}")  # Debug JSON

                self.wakeupComboBox.setCurrentText(config_data.get("wakeup_time", ""))

                # üõ†Ô∏è P≈ôevod "send_photo" ƒç√≠seln√© hodnoty na text pro GUI
                send_photo_value = config_data.get("send_photo", "0")
                if send_photo_value == "0":
                    self.sendPhotoComboBox.setCurrentText("Immediately")
                elif send_photo_value == "1":
                    self.sendPhotoComboBox.setCurrentText("After 1 hour")
                elif send_photo_value == "2":
                    self.sendPhotoComboBox.setCurrentText("After 3 hours")
                else:
                    self.sendPhotoComboBox.setCurrentText("Immediately")  # Fallback

                resolution = config_data.get("resolution")
                if resolution == "320x240 (QVGA)":
                    self.resolutionComboBox.setCurrentText("320x240 (QVGA)")
                elif resolution == "640x480 (VGA)":
                    self.resolutionComboBox.setCurrentText("640x480 (VGA)")
                elif resolution == "800x600 (SVGA)":
                    self.resolutionComboBox.setCurrentText("800x600 (SVGA)")
                elif resolution == "1024x768 (XGA)":
                    self.resolutionComboBox.setCurrentText("1024x768 (XGA)")
                elif resolution == "1280x720 (HD)":
                    self.resolutionComboBox.setCurrentText("1280x720 (HD)")
                elif resolution == "1600x1200 (UXGA)":
                    self.resolutionComboBox.setCurrentText("1600x1200 (UXGA)")

                self.qualitycomboBox.setCurrentText(config_data.get("quality", ""))
                self.phoneNumberComboBox.setCurrentText(config_data.get("phone_number", ""))
                self.apnLineEdit.setText(config_data.get("apn", ""))
                self.urlLineEdit.setText(config_data.get("url", ""))
                self.sharedKeyLineEdit.setText(config_data.get("shared_key", ""))

                # ‚úÖ Ovƒõ≈ôen√≠, zda je hodnota bool, pokud ano, p≈ôev√©st na string
                send_sms = str(config_data.get("send_sms", "false")).lower()

                # ‚úÖ Nastaven√≠ checkbox≈Ø
                #self.sendPhotosCheckBox.setChecked(send_photo == "true")
                self.sendAutoSMScheckBox.setChecked(send_sms == "true")

                self.statusBar().showMessage("‚úÖ Configuration of TrailCamera loaded.")

            except json.JSONDecodeError:
                self.statusBar().showMessage("‚ö†Ô∏è Decoding JSON error")

        except serial.SerialException as e:
            QMessageBox.critical(self, "Serial Error", f"‚ö†Ô∏è Communication err: {e}")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"‚ö†Ô∏è Unexpected err: {e}")

    def reset_to_default(self):
        """ Reset konfigurace na v√Ωchoz√≠ hodnoty a naƒçten√≠ nov√© konfigurace """
        if not self.serial_connection or not self.serial_connection.is_open:
            QMessageBox.warning(self, "Connection Error", "ESP32 is not connected.")
            return

        try:
            # ‚úÖ Po≈°leme p≈ô√≠kaz RESET_CONFIG
            self.serial_connection.write(b"RESET_CONFIG\n")
            self.serial_connection.flush()
            self.statusBar().showMessage("üì° Reset, waiting for default configuration.")

            # ‚úÖ ƒåek√°me maxim√°lnƒõ 1 sekundu na validn√≠ JSON odpovƒõƒè
            start_time = time.time()
            response = ""

            while time.time() - start_time < 1:
                if self.serial_connection.in_waiting > 0:
                    line = self.serial_connection.readline().decode(errors='ignore').strip()
                    print(f"üì° Received serial data: {line}")  # Debug v√Ωpis

                    if line.startswith("{") and line.endswith("}"):
                        response = line
                        break

            if not response.startswith("{") or not response.endswith("}"):
                self.statusBar().showMessage("‚ö†Ô∏è Bad configuration (timeout).")
                return

            # ‚úÖ Zpracov√°n√≠ JSON odpovƒõdi a aktualizace GUI
            try:
                config_data = json.loads(response)
                print(f"‚úÖ Loaded data after reset: {config_data}")  # Debug JSON

                self.wakeupComboBox.setCurrentText(config_data.get("wakeup_time", ""))

                # üîÑ Mapov√°n√≠ send_photo hodnoty
                send_photo_value = config_data.get("send_photo", "0")
                if send_photo_value == "0":
                    self.sendPhotoComboBox.setCurrentText("Immediately")
                elif send_photo_value == "1":
                    self.sendPhotoComboBox.setCurrentText("After 1 hour")
                elif send_photo_value == "2":
                    self.sendPhotoComboBox.setCurrentText("After 3 hours")
                else:
                    self.sendPhotoComboBox.setCurrentText("Immediately")

                # üîÑ Resolution (pou≈æij rovnou pokud je ve form√°tu "1024x768 (XGA)")
                resolution = config_data.get("resolution", "")
                self.resolutionComboBox.setCurrentText(resolution)

                # üîÑ Quality ‚Äì pokud n√°hodou p≈ôijde ve ≈°patn√©m form√°tu, o≈°et≈ô√≠me fallback
                quality = config_data.get("quality", "")
                if quality in ["Very high", "High", "Medium", "Low"]:
                    self.qualitycomboBox.setCurrentText(quality)
                else:
                    self.qualitycomboBox.setCurrentIndex(1)  # defaultnƒõ "High"

                self.phoneNumberComboBox.setCurrentText(config_data.get("phone_number", ""))
                self.apnLineEdit.setText(config_data.get("apn", ""))
                self.urlLineEdit.setText(config_data.get("url", ""))
                self.sharedKeyLineEdit.setText(config_data.get("shared_key", ""))

                # ‚úÖ Checkboxy
                send_sms = str(config_data.get("send_sms", "false")).lower()
                self.sendAutoSMScheckBox.setChecked(send_sms == "true")

                self.batteryLabel.setText(config_data.get("send_battery", ""))
                self.chargingLabel.setText(config_data.get("send_charging", ""))
                self.remainingTimeLabel.setText(config_data.get("send_time_remaining", ""))

                self.statusBar().showMessage("‚úÖ Configuration reset!")

            except json.JSONDecodeError as e:
                print(f"‚ùå Chyba p≈ôi parsov√°n√≠ JSON: {e}")
                self.statusBar().showMessage(f"‚ö†Ô∏è Neplatn√Ω JSON po resetu: {response}")

        except serial.SerialException as e:
            QMessageBox.critical(self, "Serial Error", f"‚ö†Ô∏è Communication Error: {e}")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"‚ö†Ô∏è Unexpected Error: {e}")

    def save_configuration(self):
        """ Ulo≈æ√≠ aktu√°ln√≠ konfiguraci do ESP32 p≈ôes s√©riovou linku """
        if not self.serial_connection or not self.serial_connection.is_open:
            QMessageBox.warning(self, "Connection Error", "ESP32 is not connected.")
            return

        # üì• P≈ôevod send_photo podle v√Ωbƒõru v GUI
        send_photo_text = self.sendPhotoComboBox.currentText()
        if send_photo_text == "Immediately":
            send_photo_value = "0"
        elif send_photo_text == "After 1 hour":
            send_photo_value = "1"
        elif send_photo_text == "After 3 hours":
            send_photo_value = "2"
        else:
            send_photo_value = "0"  # V√Ωchoz√≠ fallback, pokud by tam bylo nƒõco jin√©ho

        # üìã Sestaven√≠ JSON objektu z GUI prvk≈Ø
        config_data = {
            "wakeup_time": self.wakeupComboBox.currentText(),
            "send_photo": send_photo_value,
            "resolution": self.resolutionComboBox.currentText(),
            "quality": self.qualitycomboBox.currentText(),
            "phone_number": self.phoneNumberComboBox.currentText(),
            "apn": self.apnLineEdit.text(),
            "url": self.urlLineEdit.text(),
            "shared_key": self.sharedKeyLineEdit.text(),
            "send_sms": "true" if self.sendAutoSMScheckBox.isChecked() else "false",
            #"send_photo": "true" if self.sendPhotosCheckBox.isChecked() else "false"
        }

        # üì° Serializace JSON a odesl√°n√≠ p≈ôes s√©riovou linku
        try:
            json_config = json.dumps(config_data)
            print(f"SET_CONFIG:{json_config}\n".encode())

            # Odesl√°n√≠ konfigurace
            self.serial_connection.write(f"SET_CONFIG:{json_config}\n".encode())
            self.serial_connection.flush()
            self.statusBar().showMessage("üì° Configuration sent to ESP32.")

            # ‚è≥ ƒåek√°me na odpovƒõƒè od ESP32
            time.sleep(0.5)
            if self.serial_connection.in_waiting:
                response = self.serial_connection.readline().decode().strip()
                if response == "OK":
                    self.statusBar().showMessage("‚úÖ Configuration saved.")
                else:
                    self.statusBar().showMessage(f"‚ö†Ô∏è ESP32 answer: {response}")

        except Exception as e:
            QMessageBox.critical(self, "Serial Error", f"‚ùå serial error: {e}")















